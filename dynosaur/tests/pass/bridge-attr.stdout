#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
trait NextNone {
    type Item;
    async fn next(&mut self)
    -> Option<Self::Item>;
}
mod __dynosaur_macro_dynnextnone {
    use super::*;
    trait ErasedNextNone {
        type Item;
        fn next<'life0, 'dynosaur>(&'life0 mut self)
        ->
            ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
            Option<Self::Item>> + 'dynosaur>>
        where
        'life0: 'dynosaur,
        Self: 'dynosaur;
    }
    impl<DYNOSAUR: NextNone> ErasedNextNone for DYNOSAUR {
        type Item = <Self as NextNone>::Item;
        fn next<'life0, 'dynosaur>(&'life0 mut self)
            ->
                ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
                Option<Self::Item>> + 'dynosaur>> where 'life0: 'dynosaur,
            Self: 'dynosaur {
            Box::pin(<Self as NextNone>::next(self))
        }
    }
    #[repr(transparent)]
    pub struct DynNextNone<'dynosaur_struct, Item> {
        ptr: dyn ErasedNextNone<Item = Item> + 'dynosaur_struct,
    }
    impl<'dynosaur_struct, Item> NextNone for
        DynNextNone<'dynosaur_struct, Item> {
        type Item = Item;
        fn next(&mut self)
            -> impl ::core::future::Future<Output = Option<Self::Item>> {
            let ret:
                    ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
                    Option<Self::Item>> + '_>> = self.ptr.next();
            let ret:
                    ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
                    Option<Self::Item>> + 'static>> =
                unsafe { ::core::mem::transmute(ret) };
            ret
        }
    }
    impl<'dynosaur_struct, Item> DynNextNone<'dynosaur_struct, Item> {
        pub fn new_box(value: impl NextNone<Item = Item> + 'dynosaur_struct)
            -> Box<DynNextNone<'dynosaur_struct, Item>> {
            let value = Box::new(value);
            let value:
                    Box<dyn ErasedNextNone<Item = Item> + 'dynosaur_struct> =
                value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub fn new_arc(value: impl NextNone<Item = Item> + 'dynosaur_struct)
            -> std::sync::Arc<DynNextNone<'dynosaur_struct, Item>> {
            let value = std::sync::Arc::new(value);
            let value:
                    std::sync::Arc<dyn ErasedNextNone<Item = Item> +
                    'dynosaur_struct> = value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub fn new_rc(value: impl NextNone<Item = Item> + 'dynosaur_struct)
            -> std::rc::Rc<DynNextNone<'dynosaur_struct, Item>> {
            let value = std::rc::Rc::new(value);
            let value:
                    std::rc::Rc<dyn ErasedNextNone<Item = Item> +
                    'dynosaur_struct> = value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub const fn from_ref(value:
                &(impl NextNone<Item = Item> + 'dynosaur_struct))
            -> &DynNextNone<'dynosaur_struct, Item> {
            let value: &(dyn ErasedNextNone<Item = Item> + 'dynosaur_struct) =
                &*value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub const fn from_mut(value:
                &mut (impl NextNone<Item = Item> + 'dynosaur_struct))
            -> &mut DynNextNone<'dynosaur_struct, Item> {
            let value:
                    &mut (dyn ErasedNextNone<Item = Item> + 'dynosaur_struct) =
                &mut *value;
            unsafe { ::core::mem::transmute(value) }
        }
    }
}
use __dynosaur_macro_dynnextnone::DynNextNone;

trait NextDefault {
    type Item;
    async fn next(&mut self)
    -> Option<Self::Item>;
}
mod __dynosaur_macro_dynnextdefault {
    use super::*;
    trait ErasedNextDefault {
        type Item;
        fn next<'life0, 'dynosaur>(&'life0 mut self)
        ->
            ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
            Option<Self::Item>> + 'dynosaur>>
        where
        'life0: 'dynosaur,
        Self: 'dynosaur;
    }
    impl<DYNOSAUR: NextDefault> ErasedNextDefault for DYNOSAUR {
        type Item = <Self as NextDefault>::Item;
        fn next<'life0, 'dynosaur>(&'life0 mut self)
            ->
                ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
                Option<Self::Item>> + 'dynosaur>> where 'life0: 'dynosaur,
            Self: 'dynosaur {
            Box::pin(<Self as NextDefault>::next(self))
        }
    }
    #[repr(transparent)]
    pub struct DynNextDefault<'dynosaur_struct, Item> {
        ptr: dyn ErasedNextDefault<Item = Item> + 'dynosaur_struct,
    }
    impl<'dynosaur_struct, Item> NextDefault for
        DynNextDefault<'dynosaur_struct, Item> {
        type Item = Item;
        fn next(&mut self)
            -> impl ::core::future::Future<Output = Option<Self::Item>> {
            let ret:
                    ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
                    Option<Self::Item>> + '_>> = self.ptr.next();
            let ret:
                    ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
                    Option<Self::Item>> + 'static>> =
                unsafe { ::core::mem::transmute(ret) };
            ret
        }
    }
    impl<'dynosaur_struct, Item> DynNextDefault<'dynosaur_struct, Item> {
        pub fn new_box(value:
                impl NextDefault<Item = Item> + 'dynosaur_struct)
            -> Box<DynNextDefault<'dynosaur_struct, Item>> {
            let value = Box::new(value);
            let value:
                    Box<dyn ErasedNextDefault<Item = Item> + 'dynosaur_struct> =
                value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub fn new_arc(value:
                impl NextDefault<Item = Item> + 'dynosaur_struct)
            -> std::sync::Arc<DynNextDefault<'dynosaur_struct, Item>> {
            let value = std::sync::Arc::new(value);
            let value:
                    std::sync::Arc<dyn ErasedNextDefault<Item = Item> +
                    'dynosaur_struct> = value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub fn new_rc(value: impl NextDefault<Item = Item> + 'dynosaur_struct)
            -> std::rc::Rc<DynNextDefault<'dynosaur_struct, Item>> {
            let value = std::rc::Rc::new(value);
            let value:
                    std::rc::Rc<dyn ErasedNextDefault<Item = Item> +
                    'dynosaur_struct> = value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub const fn from_ref(value:
                &(impl NextDefault<Item = Item> + 'dynosaur_struct))
            -> &DynNextDefault<'dynosaur_struct, Item> {
            let value:
                    &(dyn ErasedNextDefault<Item = Item> + 'dynosaur_struct) =
                &*value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub const fn from_mut(value:
                &mut (impl NextDefault<Item = Item> + 'dynosaur_struct))
            -> &mut DynNextDefault<'dynosaur_struct, Item> {
            let value:
                    &mut (dyn ErasedNextDefault<Item = Item> +
                    'dynosaur_struct) = &mut *value;
            unsafe { ::core::mem::transmute(value) }
        }
    }
    impl<DYNOSAUR: NextDefault> NextDefault for &mut DYNOSAUR where
        DYNOSAUR: ?Sized {
        type Item = <DYNOSAUR as NextDefault>::Item;
        fn next(&mut self)
            -> impl ::core::future::Future<Output = Option<Self::Item>> {
            <DYNOSAUR as NextDefault>::next(self)
        }
    }
    impl<DYNOSAUR: NextDefault> NextDefault for Box<DYNOSAUR> where
        DYNOSAUR: ?Sized {
        type Item = <DYNOSAUR as NextDefault>::Item;
        fn next(&mut self)
            -> impl ::core::future::Future<Output = Option<Self::Item>> {
            <DYNOSAUR as NextDefault>::next(self)
        }
    }
}
use __dynosaur_macro_dynnextdefault::DynNextDefault;

trait NextDyn {
    type Item;
    async fn next(&mut self)
    -> Option<Self::Item>;
}
mod __dynosaur_macro_dynnextdyn {
    use super::*;
    trait ErasedNextDyn {
        type Item;
        fn next<'life0, 'dynosaur>(&'life0 mut self)
        ->
            ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
            Option<Self::Item>> + 'dynosaur>>
        where
        'life0: 'dynosaur,
        Self: 'dynosaur;
    }
    impl<DYNOSAUR: NextDyn> ErasedNextDyn for DYNOSAUR {
        type Item = <Self as NextDyn>::Item;
        fn next<'life0, 'dynosaur>(&'life0 mut self)
            ->
                ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
                Option<Self::Item>> + 'dynosaur>> where 'life0: 'dynosaur,
            Self: 'dynosaur {
            Box::pin(<Self as NextDyn>::next(self))
        }
    }
    #[repr(transparent)]
    pub struct DynNextDyn<'dynosaur_struct, Item> {
        ptr: dyn ErasedNextDyn<Item = Item> + 'dynosaur_struct,
    }
    impl<'dynosaur_struct, Item> NextDyn for
        DynNextDyn<'dynosaur_struct, Item> {
        type Item = Item;
        fn next(&mut self)
            -> impl ::core::future::Future<Output = Option<Self::Item>> {
            let ret:
                    ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
                    Option<Self::Item>> + '_>> = self.ptr.next();
            let ret:
                    ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
                    Option<Self::Item>> + 'static>> =
                unsafe { ::core::mem::transmute(ret) };
            ret
        }
    }
    impl<'dynosaur_struct, Item> DynNextDyn<'dynosaur_struct, Item> {
        pub fn new_box(value: impl NextDyn<Item = Item> + 'dynosaur_struct)
            -> Box<DynNextDyn<'dynosaur_struct, Item>> {
            let value = Box::new(value);
            let value:
                    Box<dyn ErasedNextDyn<Item = Item> + 'dynosaur_struct> =
                value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub fn new_arc(value: impl NextDyn<Item = Item> + 'dynosaur_struct)
            -> std::sync::Arc<DynNextDyn<'dynosaur_struct, Item>> {
            let value = std::sync::Arc::new(value);
            let value:
                    std::sync::Arc<dyn ErasedNextDyn<Item = Item> +
                    'dynosaur_struct> = value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub fn new_rc(value: impl NextDyn<Item = Item> + 'dynosaur_struct)
            -> std::rc::Rc<DynNextDyn<'dynosaur_struct, Item>> {
            let value = std::rc::Rc::new(value);
            let value:
                    std::rc::Rc<dyn ErasedNextDyn<Item = Item> +
                    'dynosaur_struct> = value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub const fn from_ref(value:
                &(impl NextDyn<Item = Item> + 'dynosaur_struct))
            -> &DynNextDyn<'dynosaur_struct, Item> {
            let value: &(dyn ErasedNextDyn<Item = Item> + 'dynosaur_struct) =
                &*value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub const fn from_mut(value:
                &mut (impl NextDyn<Item = Item> + 'dynosaur_struct))
            -> &mut DynNextDyn<'dynosaur_struct, Item> {
            let value:
                    &mut (dyn ErasedNextDyn<Item = Item> + 'dynosaur_struct) =
                &mut *value;
            unsafe { ::core::mem::transmute(value) }
        }
    }
    impl<'dynosaur_struct, Item> NextDyn for
        &mut DynNextDyn<'dynosaur_struct, Item> {
        type Item = Item;
        fn next(&mut self)
            -> impl ::core::future::Future<Output = Option<Self::Item>> {
            <DynNextDyn<'dynosaur_struct, Item> as NextDyn>::next(self)
        }
    }
    impl<'dynosaur_struct, Item> NextDyn for
        Box<DynNextDyn<'dynosaur_struct, Item>> {
        type Item = Item;
        fn next(&mut self)
            -> impl ::core::future::Future<Output = Option<Self::Item>> {
            <DynNextDyn<'dynosaur_struct, Item> as NextDyn>::next(self)
        }
    }
}
use __dynosaur_macro_dynnextdyn::DynNextDyn;
