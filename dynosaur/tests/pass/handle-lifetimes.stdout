#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use dynosaur::dynosaur;

trait MyTrait {
    type Item;
    async fn foo(&self, x: &i32)
    -> i32;
}
mod __dynosaur_macro_dynmytrait {
    use super::*;
    trait ErasedMyTrait {
        type Item;
        fn foo<'life0, 'life1, 'dynosaur>(&'life0 self, x: &'life1 i32)
        ->
            ::core::pin::Pin<Box<dyn ::core::future::Future<Output = i32> +
            'dynosaur>>
        where
        'life0: 'dynosaur,
        'life1: 'dynosaur,
        Self: 'dynosaur;
    }
    impl<DYNOSAUR: MyTrait> ErasedMyTrait for DYNOSAUR {
        type Item = <Self as MyTrait>::Item;
        fn foo<'life0, 'life1, 'dynosaur>(&'life0 self, x: &'life1 i32)
            ->
                ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
                i32> + 'dynosaur>> where 'life0: 'dynosaur, 'life1: 'dynosaur,
            Self: 'dynosaur {
            Box::pin(<Self as MyTrait>::foo(self, x))
        }
    }
    #[repr(transparent)]
    pub struct DynMyTrait<'dynosaur_struct, Item> {
        ptr: dyn ErasedMyTrait<Item = Item> + 'dynosaur_struct,
    }
    impl<'dynosaur_struct, Item> MyTrait for
        DynMyTrait<'dynosaur_struct, Item> {
        type Item = Item;
        fn foo(&self, x: &i32) -> impl ::core::future::Future<Output = i32> {
            let ret:
                    ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
                    i32> + '_>> = self.ptr.foo(x);
            let ret:
                    ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
                    i32> + 'static>> = unsafe { ::core::mem::transmute(ret) };
            ret
        }
    }
    impl<'dynosaur_struct, Item> DynMyTrait<'dynosaur_struct, Item> {
        pub fn new_box(value: impl MyTrait<Item = Item> + 'dynosaur_struct)
            -> Box<DynMyTrait<'dynosaur_struct, Item>> {
            let value = Box::new(value);
            let value:
                    Box<dyn ErasedMyTrait<Item = Item> + 'dynosaur_struct> =
                value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub fn new_arc(value: impl MyTrait<Item = Item> + 'dynosaur_struct)
            -> std::sync::Arc<DynMyTrait<'dynosaur_struct, Item>> {
            let value = std::sync::Arc::new(value);
            let value:
                    std::sync::Arc<dyn ErasedMyTrait<Item = Item> +
                    'dynosaur_struct> = value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub fn new_rc(value: impl MyTrait<Item = Item> + 'dynosaur_struct)
            -> std::rc::Rc<DynMyTrait<'dynosaur_struct, Item>> {
            let value = std::rc::Rc::new(value);
            let value:
                    std::rc::Rc<dyn ErasedMyTrait<Item = Item> +
                    'dynosaur_struct> = value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub fn from_ref(value:
                &(impl MyTrait<Item = Item> + 'dynosaur_struct))
            -> &DynMyTrait<'dynosaur_struct, Item> {
            let value: &(dyn ErasedMyTrait<Item = Item> + 'dynosaur_struct) =
                &*value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub fn from_mut(value:
                &mut (impl MyTrait<Item = Item> + 'dynosaur_struct))
            -> &mut DynMyTrait<'dynosaur_struct, Item> {
            let value:
                    &mut (dyn ErasedMyTrait<Item = Item> + 'dynosaur_struct) =
                &mut *value;
            unsafe { ::core::mem::transmute(value) }
        }
    }
}
use __dynosaur_macro_dynmytrait::DynMyTrait;

fn main() {}
