#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use core::future::Future;
use dynosaur::dynosaur;

trait Foo {}

impl Foo for Box<dyn Foo + '_> {}

trait MyTrait {
    fn foo(&self, _: impl Foo)
    -> i32;
    async fn bar(&self, _: impl Foo)
    -> i32;
    fn baz(&self, _: impl Future<Output = i32>)
    -> i32;
}
mod __dynosaur_macro_dynmytrait {
    use super::*;
    trait ErasedMyTrait {
        fn foo(&self, __dynosaur_arg1: Box<dyn Foo + '_>)
        -> i32;
        fn bar<'life0,
        'dynosaur>(&'life0 self, __dynosaur_arg1: Box<dyn Foo + 'dynosaur>)
        ->
            ::core::pin::Pin<Box<dyn ::core::future::Future<Output = i32> +
            'dynosaur>>
        where
        'life0: 'dynosaur,
        Self: 'dynosaur;
        fn baz(&self,
        __dynosaur_arg1: ::core::pin::Pin<Box<dyn Future<Output = i32> + '_>>)
        -> i32;
    }
    impl<DYNOSAUR: MyTrait> ErasedMyTrait for DYNOSAUR {
        fn foo(&self, __dynosaur_arg1: Box<dyn Foo + '_>) -> i32 {
            <Self as MyTrait>::foo(self, __dynosaur_arg1)
        }
        fn bar<'life0,
            'dynosaur>(&'life0 self,
            __dynosaur_arg1: Box<dyn Foo + 'dynosaur>)
            ->
                ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
                i32> + 'dynosaur>> where 'life0: 'dynosaur, Self: 'dynosaur {
            Box::pin(<Self as MyTrait>::bar(self, __dynosaur_arg1))
        }
        fn baz(&self,
            __dynosaur_arg1:
                ::core::pin::Pin<Box<dyn Future<Output = i32> + '_>>) -> i32 {
            <Self as MyTrait>::baz(self, __dynosaur_arg1)
        }
    }
    #[repr(transparent)]
    pub struct DynMyTrait<'dynosaur_struct> {
        ptr: dyn ErasedMyTrait + 'dynosaur_struct,
    }
    impl<'dynosaur_struct> MyTrait for DynMyTrait<'dynosaur_struct> {
        fn foo(&self, __dynosaur_arg1: impl Foo) -> i32 {
            self.ptr.foo(Box::new(__dynosaur_arg1))
        }
        fn bar(&self, __dynosaur_arg1: impl Foo)
            -> impl ::core::future::Future<Output = i32> {
            let ret:
                    ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
                    i32> + '_>> = self.ptr.bar(Box::new(__dynosaur_arg1));
            let ret:
                    ::core::pin::Pin<Box<dyn ::core::future::Future<Output =
                    i32> + 'static>> = unsafe { ::core::mem::transmute(ret) };
            ret
        }
        fn baz(&self, __dynosaur_arg1: impl Future<Output = i32>) -> i32 {
            self.ptr.baz(Box::pin(__dynosaur_arg1))
        }
    }
    impl<'dynosaur_struct> DynMyTrait<'dynosaur_struct> {
        pub fn new_box(value: impl MyTrait + 'dynosaur_struct)
            -> Box<DynMyTrait<'dynosaur_struct>> {
            let value = Box::new(value);
            let value: Box<dyn ErasedMyTrait + 'dynosaur_struct> = value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub fn new_arc(value: impl MyTrait + 'dynosaur_struct)
            -> std::sync::Arc<DynMyTrait<'dynosaur_struct>> {
            let value = std::sync::Arc::new(value);
            let value: std::sync::Arc<dyn ErasedMyTrait + 'dynosaur_struct> =
                value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub fn new_rc(value: impl MyTrait + 'dynosaur_struct)
            -> std::rc::Rc<DynMyTrait<'dynosaur_struct>> {
            let value = std::rc::Rc::new(value);
            let value: std::rc::Rc<dyn ErasedMyTrait + 'dynosaur_struct> =
                value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub const fn from_box(value: Box<impl MyTrait + 'dynosaur_struct>)
            -> Box<DynMyTrait<'dynosaur_struct>> {
            let value: Box<dyn ErasedMyTrait + 'dynosaur_struct> = value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub const fn from_ref(value: &(impl MyTrait + 'dynosaur_struct))
            -> &DynMyTrait<'dynosaur_struct> {
            let value: &(dyn ErasedMyTrait + 'dynosaur_struct) = &*value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub const fn from_mut(value: &mut (impl MyTrait + 'dynosaur_struct))
            -> &mut DynMyTrait<'dynosaur_struct> {
            let value: &mut (dyn ErasedMyTrait + 'dynosaur_struct) =
                &mut *value;
            unsafe { ::core::mem::transmute(value) }
        }
    }
    impl<DYNOSAUR: MyTrait> MyTrait for &DYNOSAUR where DYNOSAUR: ?Sized {
        fn foo(&self, __dynosaur_arg1: impl Foo) -> i32 {
            <DYNOSAUR as MyTrait>::foo(self, __dynosaur_arg1)
        }
        fn bar(&self, __dynosaur_arg1: impl Foo)
            -> impl ::core::future::Future<Output = i32> {
            <DYNOSAUR as MyTrait>::bar(self, __dynosaur_arg1)
        }
        fn baz(&self, __dynosaur_arg1: impl Future<Output = i32>) -> i32 {
            <DYNOSAUR as MyTrait>::baz(self, __dynosaur_arg1)
        }
    }
    impl<DYNOSAUR: MyTrait> MyTrait for &mut DYNOSAUR where DYNOSAUR: ?Sized {
        fn foo(&self, __dynosaur_arg1: impl Foo) -> i32 {
            <DYNOSAUR as MyTrait>::foo(self, __dynosaur_arg1)
        }
        fn bar(&self, __dynosaur_arg1: impl Foo)
            -> impl ::core::future::Future<Output = i32> {
            <DYNOSAUR as MyTrait>::bar(self, __dynosaur_arg1)
        }
        fn baz(&self, __dynosaur_arg1: impl Future<Output = i32>) -> i32 {
            <DYNOSAUR as MyTrait>::baz(self, __dynosaur_arg1)
        }
    }
    impl<DYNOSAUR: MyTrait> MyTrait for Box<DYNOSAUR> where DYNOSAUR: ?Sized {
        fn foo(&self, __dynosaur_arg1: impl Foo) -> i32 {
            <DYNOSAUR as MyTrait>::foo(self, __dynosaur_arg1)
        }
        fn bar(&self, __dynosaur_arg1: impl Foo)
            -> impl ::core::future::Future<Output = i32> {
            <DYNOSAUR as MyTrait>::bar(self, __dynosaur_arg1)
        }
        fn baz(&self, __dynosaur_arg1: impl Future<Output = i32>) -> i32 {
            <DYNOSAUR as MyTrait>::baz(self, __dynosaur_arg1)
        }
    }
}
use __dynosaur_macro_dynmytrait::DynMyTrait;

fn main() {}
