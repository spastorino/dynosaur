#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use dynosaur::dynosaur;

trait MyTrait {
    fn foo(&mut self) -> impl Send { 10 }
}
mod __dynosaur_macro_dynmytrait {
    use super::*;
    trait ErasedMyTrait {
        fn foo<'life0, 'dynosaur>(&'life0 mut self)
        -> Box<dyn Send + 'dynosaur>
        where
        'life0: 'dynosaur,
        Self: 'dynosaur;
    }
    impl<DYNOSAUR: MyTrait> ErasedMyTrait for DYNOSAUR {
        fn foo<'life0, 'dynosaur>(&'life0 mut self)
            -> Box<dyn Send + 'dynosaur> where 'life0: 'dynosaur,
            Self: 'dynosaur {
            Box::new(<Self as MyTrait>::foo(self))
        }
    }
    #[repr(transparent)]
    pub struct DynMyTrait<'dynosaur_struct> {
        ptr: dyn ErasedMyTrait + 'dynosaur_struct,
    }
    impl<'dynosaur_struct> MyTrait for DynMyTrait<'dynosaur_struct> {
        fn foo(&mut self) -> impl Send {
            let ret: Box<dyn Send + '_> = self.ptr.foo();
            let ret: Box<dyn Send + '_> =
                unsafe { ::core::mem::transmute(ret) };
            ret
        }
    }
    impl<'dynosaur_struct> DynMyTrait<'dynosaur_struct> {
        pub fn new_box(value: impl MyTrait + 'dynosaur_struct)
            -> Box<DynMyTrait<'dynosaur_struct>> {
            let value = Box::new(value);
            let value: Box<dyn ErasedMyTrait + 'dynosaur_struct> = value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub fn new_arc(value: impl MyTrait + 'dynosaur_struct)
            -> std::sync::Arc<DynMyTrait<'dynosaur_struct>> {
            let value = std::sync::Arc::new(value);
            let value: std::sync::Arc<dyn ErasedMyTrait + 'dynosaur_struct> =
                value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub fn new_rc(value: impl MyTrait + 'dynosaur_struct)
            -> std::rc::Rc<DynMyTrait<'dynosaur_struct>> {
            let value = std::rc::Rc::new(value);
            let value: std::rc::Rc<dyn ErasedMyTrait + 'dynosaur_struct> =
                value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub const fn from_ref(value: &(impl MyTrait + 'dynosaur_struct))
            -> &DynMyTrait<'dynosaur_struct> {
            let value: &(dyn ErasedMyTrait + 'dynosaur_struct) = &*value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub const fn from_mut(value: &mut (impl MyTrait + 'dynosaur_struct))
            -> &mut DynMyTrait<'dynosaur_struct> {
            let value: &mut (dyn ErasedMyTrait + 'dynosaur_struct) =
                &mut *value;
            unsafe { ::core::mem::transmute(value) }
        }
    }
}
use __dynosaur_macro_dynmytrait::DynMyTrait;

fn main() {}
