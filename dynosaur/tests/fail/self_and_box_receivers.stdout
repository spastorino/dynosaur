#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use std::rc::Rc;

trait All {
    fn ref_mut(&mut self);
    fn ref_(&self)
    -> impl Send;
    fn owned(self)
    -> impl Send;
    fn self_box(self: Box<Self>)
    -> impl Send;
    fn self_rc(self: Rc<Self>)
    -> impl Send;
}
mod __dynosaur_macro_dynall {
    use super::*;
    trait ErasedAll {
        fn ref_mut(&mut self);
        fn ref_<'life0, 'dynosaur>(&'life0 self)
        -> Box<dyn Send + 'dynosaur>
        where
        'life0: 'dynosaur,
        Self: 'dynosaur;
        fn owned<'dynosaur>(self)
        -> Box<dyn Send + 'dynosaur>
        where
        Self: 'dynosaur;
        fn self_box<'dynosaur>(self: Box<Self>)
        -> Box<dyn Send + 'dynosaur>
        where
        Self: 'dynosaur;
        fn self_rc<'dynosaur>(self: Rc<Self>)
        -> Box<dyn Send + 'dynosaur>
        where
        Self: 'dynosaur;
    }
    impl<DYNOSAUR: All> ErasedAll for DYNOSAUR {
        fn ref_mut(&mut self) { <Self as All>::ref_mut(self) }
        fn ref_<'life0, 'dynosaur>(&'life0 self) -> Box<dyn Send + 'dynosaur>
            where 'life0: 'dynosaur, Self: 'dynosaur {
            Box::new(<Self as All>::ref_(self))
        }
        fn owned<'dynosaur>(self) -> Box<dyn Send + 'dynosaur> where
            Self: 'dynosaur {
            Box::new(<Self as All>::owned(self))
        }
        fn self_box<'dynosaur>(self: Box<Self>) -> Box<dyn Send + 'dynosaur>
            where Self: 'dynosaur {
            Box::new(<Self as All>::self_box(self))
        }
        fn self_rc<'dynosaur>(self: Rc<Self>) -> Box<dyn Send + 'dynosaur>
            where Self: 'dynosaur {
            Box::new(<Self as All>::self_rc(self))
        }
    }
    #[repr(transparent)]
    pub struct DynAll<'dynosaur_struct> {
        ptr: dyn ErasedAll + 'dynosaur_struct,
    }
    impl<'dynosaur_struct> All for DynAll<'dynosaur_struct> {
        fn ref_mut(&mut self) { self.ptr.ref_mut() }
        fn ref_(&self) -> impl Send {
            let ret: Box<dyn Send + '_> = self.ptr.ref_();
            let ret: Box<dyn Send + '_> =
                unsafe { ::core::mem::transmute(ret) };
            ret
        }
        fn owned(self) -> impl Send {
            let ret: Box<dyn Send + '_> = self.ptr.owned();
            let ret: Box<dyn Send + '_> =
                unsafe { ::core::mem::transmute(ret) };
            ret
        }
        fn self_box(self: Box<Self>) -> impl Send {
            let ret: Box<dyn Send + '_> = self.ptr.self_box();
            let ret: Box<dyn Send + '_> =
                unsafe { ::core::mem::transmute(ret) };
            ret
        }
        fn self_rc(self: Rc<Self>) -> impl Send {
            let ret: Box<dyn Send + '_> = self.ptr.self_rc();
            let ret: Box<dyn Send + '_> =
                unsafe { ::core::mem::transmute(ret) };
            ret
        }
    }
    impl<'dynosaur_struct> DynAll<'dynosaur_struct> {
        pub fn new_box(value: impl All + 'dynosaur_struct)
            -> Box<DynAll<'dynosaur_struct>> {
            let value = Box::new(value);
            let value: Box<dyn ErasedAll + 'dynosaur_struct> = value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub fn new_arc(value: impl All + 'dynosaur_struct)
            -> std::sync::Arc<DynAll<'dynosaur_struct>> {
            let value = std::sync::Arc::new(value);
            let value: std::sync::Arc<dyn ErasedAll + 'dynosaur_struct> =
                value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub fn new_rc(value: impl All + 'dynosaur_struct)
            -> std::rc::Rc<DynAll<'dynosaur_struct>> {
            let value = std::rc::Rc::new(value);
            let value: std::rc::Rc<dyn ErasedAll + 'dynosaur_struct> = value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub const fn from_box(value: Box<impl All + 'dynosaur_struct>)
            -> Box<DynAll<'dynosaur_struct>> {
            let value: Box<dyn ErasedAll + 'dynosaur_struct> = value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub const fn from_ref(value: &(impl All + 'dynosaur_struct))
            -> &DynAll<'dynosaur_struct> {
            let value: &(dyn ErasedAll + 'dynosaur_struct) = &*value;
            unsafe { ::core::mem::transmute(value) }
        }
        pub const fn from_mut(value: &mut (impl All + 'dynosaur_struct))
            -> &mut DynAll<'dynosaur_struct> {
            let value: &mut (dyn ErasedAll + 'dynosaur_struct) = &mut *value;
            unsafe { ::core::mem::transmute(value) }
        }
    }
}
use __dynosaur_macro_dynall::DynAll;

fn main() {}
